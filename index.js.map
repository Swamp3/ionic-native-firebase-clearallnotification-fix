{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/firebase/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n/**\r\n * @name Firebase\r\n * @description\r\n * This plugin brings push notifications, analytics, event tracking, crash reporting and more from Google Firebase to your Cordova project! Android and iOS supported (including iOS 10).\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { Firebase } from '@ionic-native/firebase';\r\n *\r\n * constructor(private firebase: Firebase) { }\r\n *\r\n * ...\r\n *\r\n * this.firebase.getToken()\r\n *   .then(token => console.log(`The token is ${token}`)) // save the token server-side and use it to push notifications to this device\r\n *   .catch(error => console.error('Error getting token', error));\r\n *\r\n * this.firebase.onNotificationOpen()\r\n *    .subscribe(data => console.log(`User opened a notification ${data}`));\r\n *\r\n * this.firebase.onTokenRefresh()\r\n *   .subscribe((token: string) => console.log(`Got a new token ${token}`));\r\n *\r\n * ```\r\n */\r\n@Plugin({\r\n  pluginName: 'Firebase',\r\n  plugin: 'cordova-plugin-firebase-lib',\r\n  pluginRef: 'FirebasePlugin',\r\n  repo: 'https://github.com/wizpanda/cordova-plugin-firebase-lib',\r\n  platforms: ['Android', 'iOS']\r\n})\r\n@Injectable()\r\nexport class Firebase extends IonicNativePlugin {\r\n  /**\r\n   * Get the device token\r\n   * @return {Promise<null | string>} Note that token will be null if it has not been established yet\r\n   */\r\n  @Cordova()\r\n  getToken(): Promise<null | string> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Get notified when a token is refreshed\r\n   * @return {Observable<any>}\r\n   */\r\n  @Cordova({\r\n    observable: true\r\n  })\r\n  onTokenRefresh(): Observable<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Get notified when the user opens a notification\r\n   * @return {Observable<any>}\r\n   */\r\n  @Cordova({\r\n    observable: true\r\n  })\r\n  onNotificationOpen(): Observable<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Grant permission to receive push notifications\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['iOS']\r\n  })\r\n  grantPermission(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Check permission to receive push notifications\r\n   * @return {Promise<{isEnabled: boolean}>}\r\n   */\r\n  @Cordova()\r\n  hasPermission(): Promise<{ isEnabled: boolean }> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set icon badge number. Set to 0 to clear the badge.\r\n   * @param {number} badgeNumber\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setBadgeNumber(badgeNumber: number): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Get icon badge number\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getBadgeNumber(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Subscribe to a topic\r\n   * @param {string} topic\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  subscribe(topic: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from a topic\r\n   * @param {string} topic\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  unsubscribe(topic: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Unregister from firebase, used to stop receiving push notifications.\r\n   * Call this when you logout user from your app.\r\n   */\r\n  @Cordova()\r\n  unregister(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Log an event using Analytics\r\n   * @param {string} type\r\n   * @param {Object} data\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  logEvent(type: string, data: any): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Log an Error using FirebaseCrash\r\n   * @param {string} message\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  logError(message: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set the name of the current screen in Analytics\r\n   * @param {string} name Screen name\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setScreenName(name: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set a user id for use in Analytics\r\n   * @param {string} userId\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setUserId(userId: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set a user property for use in Analytics\r\n   * @param {string} name\r\n   * @param {string} value\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setUserProperty(name: string, value: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Fetch Remote Config parameter values for your app\r\n   * @param {number} [cacheExpirationSeconds]\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 2\r\n  })\r\n  fetch(cacheExpirationSeconds?: number): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Activate the Remote Config fetched config\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  activateFetched(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Retrieve a Remote Config value\r\n   * @param {string} key\r\n   * @param {string} [namespace]\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    successIndex: 2,\r\n    errorIndex: 3\r\n  })\r\n  getValue(key: string, namespace?: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Retrieve a Remote Config byte array\r\n   * @param {string} key\r\n   * @param {string} [namespace]\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  getByteArray(key: string, namespace?: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Get the current state of the FirebaseRemoteConfig singleton object\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  getInfo(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Change the settings for the FirebaseRemoteConfig object's operations\r\n   * @param {Object} settings\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  setConfigSettings(settings: any): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set defaults in the Remote Config\r\n   * @param {Object} defaults\r\n   * @param {string} [namespace]\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  setDefaults(defaults: any, namespace?: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Start a trace.\r\n   * @param {string} trace Trace name\r\n   */\r\n  @Cordova()\r\n  startTrace(trace: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * To count the performance-related events that occur in your app (such as cache hits or retries), add a line of code\r\n   * similar to the following whenever the event occurs, using a string other than retry to name that event if you are\r\n   * counting a different type of event:\r\n   * @param {string} trace Trace name\r\n   * @param {string} counter Counter\r\n   */\r\n  @Cordova()\r\n  incrementCounter(trace: string, counter: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Stop the trace\r\n   * @param {string} trace Trace name\r\n   */\r\n  @Cordova()\r\n  stopTrace(trace: string): void {}\r\n\r\n  /**\r\n   * Allows the user to enable/disable analytics collection\r\n   * @param {boolean} enabled value to set collection\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setAnalyticsCollectionEnabled(enabled: boolean): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Allows the user to set User Identifier for crashlytics reporting\r\n   * https://firebase.google.com/docs/crashlytics/customize-crash-reports?authuser=0#set_user_ids\r\n   * @param {string} userId value to set the userId\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setCrashlyticsUserId(userId: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Sends an SMS to the user with the SMS verification code and returns the Verification ID required to sign in using phone authentication\r\n   * @param {string} phoneNumber The phone number, including '+' and country code\r\n   * @param {number} timeoutDuration (Android only) The timeout in sec - no more SMS will be sent to this number until this timeout expires\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android', 'iOS'],\r\n    successIndex: 2,\r\n    errorIndex: 3\r\n  })\r\n  verifyPhoneNumber(\r\n    phoneNumber: string,\r\n    timeoutDuration = 0\r\n  ): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Clear all pending notifications from the drawer\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  clearAllNotifications(): Promise<any> {\r\n    return;\r\n  }\r\n}\r\n"]}