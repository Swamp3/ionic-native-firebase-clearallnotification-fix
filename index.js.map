{"version":3,"sources":["../../../src/@ionic-native/plugins/firebase-x/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface IChannelOptions {\r\n  /**\r\n   * Channel ID - must be unique per app package\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * Channel name. Default: empty string\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * The sound to play once a push comes. Default value: 'default'\r\n   * Values allowed:\r\n   * 'default' - plays the default notification sound\r\n   * 'ringtone' - plays the currently set ringtone\r\n   * 'false' - silent; don't play any sound\r\n   * filename - the filename of the sound file located in '/res/raw' without file extension (mysound.mp3 -> mysound)\r\n   */\r\n  sound?: string;\r\n\r\n  /**\r\n   * Vibrate on new notification. Default value: true\r\n   * Possible values:\r\n   * Boolean - vibrate or not\r\n   * Array - vibration pattern - e.g. [500, 200, 500] - milliseconds vibrate, milliseconds pause, vibrate, pause, etc.\r\n   */\r\n  vibration?: boolean;\r\n\r\n  /**\r\n   * Whether to blink the LED\r\n   */\r\n  light?: boolean;\r\n\r\n  /**\r\n   * LED color in ARGB format - this example BLUE color. If set to -1, light color will be default. Default value: -1.\r\n   */\r\n  lightColor?: string;\r\n\r\n  /**\r\n   * Importance - integer from 0 to 4. Default value: 4\r\n   * 0 - none - no sound, does not show in the shade\r\n   * 1 - min - no sound, only shows in the shade, below the fold\r\n   * 2 - low - no sound, shows in the shade, and potentially in the status bar\r\n   * 3 - default - shows everywhere, makes noise, but does not visually intrude\r\n   * 4 - high - shows everywhere, makes noise and peeks\r\n   */\r\n  importance?: 0 | 1 | 2 | 3 | 4;\r\n\r\n  /**\r\n   * Show badge over app icon when non handled pushes are present. Default value: true\r\n   */\r\n  badge?: boolean;\r\n\r\n  /**\r\n   * Show message on locked screen. Default value: 1\r\n   * Possible values (default 1):\r\n   * -1 - secret - Do not reveal any part of the notification on a secure lockscreen.\r\n   * 0 - private - Show the notification on all lockscreens, but conceal sensitive or private information on secure lockscreens.\r\n   * 1 - public - Show the notification in its entirety on all lockscreens.\r\n   */\r\n  visibility?: -1 | 0 | 1;\r\n}\r\n\r\n/**\r\n * @name Firebase X\r\n * @description\r\n * This plugin brings push notifications, analytics, event tracking, crash reporting and more from Google Firebase to your Cordova project! Android and iOS supported.\r\n * It is a maintained fork from unmaintained ionic-navite plugin called Firebase.\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { FirebaseX } from '@ionic-native/firebase-x';\r\n *\r\n *\r\n * constructor(private firebaseX: FirebaseX) { }\r\n *\r\n * ...\r\n *\r\n *\r\n * this.firebaseX.getToken()\r\n *   .then(token => console.log(`The token is ${token}`)) // save the token server-side and use it to push notifications to this device\r\n *   .catch(error => console.error('Error getting token', error));\r\n *\r\n * this.firebaseX.onMessageReceived()\r\n *   .subscribe(data => console.log(`User opened a notification ${data}`));\r\n *\r\n * this.firebaseX.onTokenRefresh()\r\n *   .subscribe((token: string) => console.log(`Got a new token ${token}`));\r\n * ```\r\n * @interfaces\r\n * IChannelOptions\r\n *\r\n */\r\n@Plugin({\r\n  pluginName: 'FirebaseX',\r\n  plugin: 'cordova-plugin-firebasex',\r\n  pluginRef: 'FirebasePlugin',\r\n  repo: 'https://github.com/dpa99c/cordova-plugin-firebasex',\r\n  platforms: ['Android', 'iOS']\r\n})\r\n\r\nexport class FirebaseX extends IonicNativePlugin {\r\n  /**\r\n   * Get the device token.\r\n   * @return {Promise<null | string>} Note that token will be null if it has not been established yet\r\n   */\r\n  @Cordova()\r\n  getToken(): Promise<null | string> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Get notified when a token is refreshed.\r\n   * @return {Observable<any>}\r\n   */\r\n  @Cordova({\r\n    observable: true\r\n  })\r\n  onTokenRefresh(): Observable<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback function to invoke when:\r\n   * - a notification or data message is received by the app\r\n   * - a system notification is tapped by the user\r\n   * @return {Observable<any>}\r\n   */\r\n  @Cordova({\r\n    observable: true\r\n  })\r\n  onMessageReceived(): Observable<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Grant permission to receive push notifications (will trigger prompt) and return hasPermission: true. iOS only (Android will always return true).\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['iOS']\r\n  })\r\n  grantPermission(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Check permission to receive push notifications and return hasPermission: true. iOS only (Android will always return true).\r\n   * @return {Promise<{isEnabled: boolean}>}\r\n   */\r\n  @Cordova()\r\n  hasPermission(): Promise<{ isEnabled: boolean }> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Unregister from firebase, used to stop receiving push notifications. Call this when you logout user from your app.\r\n   */\r\n  @Cordova()\r\n  unregister(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set a number on the icon badge. Set 0 to clear the badge\r\n   * @param {number} badgeNumber\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setBadgeNumber(badgeNumber: number): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Get icon badge number.\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getBadgeNumber(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Clear all pending notifications from the drawer.\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    platforms: ['Android']\r\n  })\r\n  clearAllNotifications(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Subscribe to a topic. Topic messaging allows you to send a message to multiple devices that have opted in to a particular topic.\r\n   * @param {string} topic\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  subscribe(topic: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from a topic. This will stop you receiving messages for that topic.\r\n   * @param {string} topic\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  unsubscribe(topic: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Android 8+ only. Creates a custom channel to be used by notification messages which have the channel property set in the message payload to the id of the created channel:\r\n   * - for background (system) notifications: android.notification.channel_id\r\n   * - for foreground/data notifications: data.notification_android_channel_id\r\n   *\r\n   * Calling on Android 7 or below or another platform will have no effect.\r\n   * @param {IChannelOptions} channelOptions\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  createChannel(channelOptions: IChannelOptions): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Android 8+ only. Overrides the properties for the default channel.\r\n   * The default channel is used if no other channel exists or is specified in the notification.\r\n   * Any options not specified will not be overridden. Should be called as soon as possible (on app start) so default notifications will work as expected.\r\n   * Calling on Android 7 or below or another platform will have no effect.\r\n   * @param {IChannelOptions} channelOptions\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setDefaultChannel(channelOptions: IChannelOptions): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Android 8+ only. Removes a previously defined channel.\r\n   * Calling on Android 7 or below or another platform will have no effect.\r\n   * @param {string} channelID\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  deleteChannel(channelID: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Android 8+ only. Gets a list of all channels.\r\n   * Calling on Android 7 or below or another platform will have no effect.\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  listChannels(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Enable/disable analytics collection (useful for GDPR/privacy settings).\r\n   * @param {boolean} enabled\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setAnalyticsCollectionEnabled(enabled: boolean): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Log an event using Analytics\r\n   * @param {string} type\r\n   * @param {Object} data\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  logEvent(type: string, data: any): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set the name of the current screen in Analytics\r\n   * @param {string} name Screen name\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setScreenName(name: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set a user id for use in Analytics\r\n   * @param {string} userId\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setUserId(userId: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set a user property for use in Analytics\r\n   * @param {string} name\r\n   * @param {string} value\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setUserProperty(name: string, value: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set Crashlytics user identifier.\r\n   * To diagnose an issue, it’s often helpful to know which of your users experienced a given crash.\r\n   * Crashlytics includes a way to anonymously identify users in your crash reports.\r\n   * To add user IDs to your reports, assign each user a unique identifier in the form of an ID number, token, or hashed value.\r\n   *\r\n   * More info https://firebase.google.com/docs/crashlytics/customize-crash-reports?authuser=0#set_user_ids\r\n   * @param {string} userId\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setCrashlyticsUserId(userId: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Simulates (causes) a fatal native crash which causes a crash event to be sent to Crashlytics (useful for testing).\r\n   * See the Firebase documentation regarding crash testing.\r\n   * Crashes will appear under Event type = \"Crashes\" in the Crashlytics console.\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  sendCrash(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Sends a crash-related log message that will appear in the Logs section of the next native crash event.\r\n   * Note: if you don't then crash, the message won't be sent! Also logs the message to the native device console.\r\n   * @param {string} message\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  logMessage(message: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Sends a non-fatal error event to Crashlytics. In a Cordova app, you may use this to log unhandled Javascript exceptions, for example.\r\n   * The event will appear under Event type = \"Non-fatals\" in the Crashlytics console.\r\n   * The error message will appear in the Logs section of the non-fatal error event.\r\n   * Also logs the error message to the native device console.\r\n   * @param {string} error\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  logError(error: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Request a verification ID and send a SMS with a verification code. Use them to construct a credential to sign in the user (in your app).\r\n   *\r\n   * More info:\r\n   * https://github.com/dpa99c/cordova-plugin-firebasex#verifyphonenumber\r\n   * https://firebase.google.com/docs/auth/android/phone-auth\r\n   * https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signInWithCredential\r\n   * https://firebase.google.com/docs/reference/js/firebase.User#linkWithCredential\r\n   *\r\n   * NOTE: This will only work on physical devices.\r\n   *\r\n   * iOS will return: credential (string)\r\n   *\r\n   * Android will return:\r\n   * credential.verificationId (object and with key verificationId)\r\n   * credential.instantVerification (boolean) credential.code (string)\r\n   * (note that this key only exists if instantVerification is true)\r\n   *\r\n   * You need to use device plugin in order to access the right key.\r\n   * IMPORTANT NOTE: Android supports auto-verify and instant device verification.\r\n   * Therefore in that case it doesn't make sense to ask for an sms code as you won't receive one.\r\n   * In this case you'll get a credential.verificationId and a credential.code where code is the auto received verification code\r\n   * that would normally be sent via sms. To log in using this procedure you must pass this code to\r\n   * PhoneAuthProvider.credential(verificationId, code). You'll find an implementation example further below.\r\n   *\r\n   * When using node.js Firebase Admin-SDK, follow this tutorial:\r\n   * https://firebase.google.com/docs/auth/admin/create-custom-tokens\r\n   *\r\n   * Pass back your custom generated token and call\r\n   * firebase.auth().signInWithCustomToken(customTokenFromYourServer);\r\n   * instead of\r\n   * firebase.auth().signInWithCredential(credential)\r\n   *\r\n   * YOU HAVE TO COVER THIS PROCESS, OR YOU WILL HAVE ABOUT 5% OF USERS STICKING ON YOUR SCREEN, NOT RECEIVING ANYTHING\r\n   * If this process is too complex for you, use this awesome plugin\r\n   * https://github.com/chemerisuk/cordova-plugin-firebase-authentication\r\n   * It's not perfect but it fits for the most use cases and doesn't require calling your endpoint, as it has native phone auth support.\r\n   *\r\n   * Android\r\n   * To use this auth you need to configure your app SHA hash in the android app configuration in the firebase console.\r\n   * See https://developers.google.com/android/guides/client-auth to know how to get SHA app hash.\r\n   *\r\n   * iOS\r\n   * Setup your push notifications first, and verify that they are arriving on your physical device before you test this method.\r\n   * Use the APNs auth key to generate the .p8 file and upload it to firebase. When you call this method,\r\n   * FCM sends a silent push to the device to verify it.\r\n   *\r\n   * @param {string} phoneNumber The phone number, including '+' and country code\r\n   * @param {number} timeoutDuration (Android only) The timeout in sec - no more SMS will be sent to this number until this timeout expires\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  verifyPhoneNumber(\r\n    phoneNumber: string,\r\n    timeoutDuration = 0\r\n  ): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Fetch Remote Config parameter values for your app.\r\n   * @param {number} cacheExpirationSeconds specify the cacheExpirationSeconds\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  fetch(cacheExpirationSeconds?: number): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Activate the Remote Config fetched config.\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  activateFetched(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Retrieve a Remote Config value.\r\n   * @param {string} key\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getValue(key: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Android only. Retrieve a Remote Config byte array.\r\n   * @param {string} key\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getByteArray(key: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Android only. Get the current state of the FirebaseRemoteConfig singleton object.\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  getInfo(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Android only. Change the settings for the FirebaseRemoteConfig object's operations.\r\n   * @param {Object} settings\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setConfigSettings(settings: any): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Android only. Set defaults in the Remote Config.\r\n   * @param {Object} settings\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setDefaults(settings: any): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Start a trace.\r\n   * @param {string} name\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  startTrace(name: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * To count the performance-related events that occur in your app (such as cache hits or retries),\r\n   * add a line of code similar to the following whenever the event occurs,\r\n   * using a string other than retry to name that event if you are counting a different type of event.\r\n   * @param {string} name\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  incrementCounter(name: string): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Stop the trace.\r\n   * @param {string} name\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  stopTrace(name: string): Promise<any> {\r\n    return;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}